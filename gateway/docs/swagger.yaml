definitions:
  model.CreateCustomerRequest:
    properties:
      email:
        type: string
      name:
        type: string
      surname:
        type: string
    type: object
  model.CreateProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      id_seller:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    type: object
  model.CreatePurchaseRequest:
    properties:
      customer_id:
        type: string
      product_id:
        type: string
      units:
        type: integer
    type: object
  model.CreateSellerRequest:
    properties:
      business_name:
        type: string
      email:
        type: string
    type: object
  model.Customer:
    properties:
      customer_id:
        type: string
      email:
        type: string
      name:
        type: string
      surname:
        type: string
    type: object
  model.CustomerID:
    properties:
      customer_id:
        type: string
    type: object
  model.Product:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        example: ""
        type: string
      id_seller:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    type: object
  model.ProductID:
    properties:
      product_id:
        type: string
    type: object
  model.Purchase:
    properties:
      date:
        type: string
      id:
        type: string
      id_product:
        type: string
      id_user:
        type: string
      total:
        type: number
      units:
        type: integer
    type: object
  model.Seller:
    properties:
      businessName:
        type: string
      email:
        type: string
      seller_id:
        type: string
    type: object
  model.SellerID:
    properties:
      seller_id:
        type: string
    type: object
  model.UpdateCustomerRequest:
    properties:
      email:
        type: string
      name:
        type: string
      surname:
        type: string
    type: object
  model.UpdateProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    type: object
  model.UpdateSellerRequest:
    properties:
      business_name:
        type: string
      email:
        type: string
    type: object
info:
  contact: {}
paths:
  /customers:
    get:
      consumes:
      - application/json
      description: Find customer with given id
      parameters:
      - description: find name
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Customer'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Find customer
      tags:
      - Customers
    post:
      consumes:
      - application/json
      description: Create customer
      parameters:
      - description: Register
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.CustomerID'
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Create a customer
      tags:
      - Customers
  /customers/{id}:
    delete:
      description: Unregister customer from a customer
      parameters:
      - description: ID from customer to unregister
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Unregister a customer
      tags:
      - Customers
    put:
      description: Update customer from a customer
      parameters:
      - description: Update
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UpdateCustomerRequest'
      - description: ID from customer to update
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Update a customer
      tags:
      - Customers
  /products:
    get:
      consumes:
      - application/json
      description: Find products that contains given name string and category string
      parameters:
      - description: find name
        in: query
        name: name
        type: string
      - description: find category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Product'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Find products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create product from a seller
      parameters:
      - description: Create a product
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/model.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ProductID'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "406":
          description: Not Acceptable
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Create a product
      tags:
      - Products
  /products/{id}:
    delete:
      description: Delete product
      parameters:
      - description: ID from product to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Delete a product
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update product from a seller
      parameters:
      - description: Register
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UpdateProductRequest'
      - description: ID from product to update
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Update a product
      tags:
      - Products
  /products/prices:
    get:
      consumes:
      - application/json
      description: Filter products that contains given name string and category string
      parameters:
      - description: starting price
        in: query
        minimum: 0
        name: min_price
        type: number
      - description: limit price
        in: query
        minimum: 0
        name: max_price
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Product'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Filter products
      tags:
      - Products
  /purchases/products:
    post:
      consumes:
      - application/json
      description: Make User buy Product by ids.
      parameters:
      - description: Register
        in: body
        name: Purhcase
        required: true
        schema:
          $ref: '#/definitions/model.CreatePurchaseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Purchase'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Make a purchase.
      tags:
      - Purchases
  /purchases/products/{id}:
    get:
      description: Find purchases from product
      parameters:
      - description: ID from product
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Purchase'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Find purchases from product.
      tags:
      - Purchases
  /sellers:
    get:
      consumes:
      - application/json
      description: Find sellers that contains given business name
      parameters:
      - description: find name
        in: query
        name: business_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Seller'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Find sellers
      tags:
      - Sellers
    post:
      consumes:
      - application/json
      description: Create seller
      parameters:
      - description: Register
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.CreateSellerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.SellerID'
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Create a seller
      tags:
      - Sellers
  /sellers/{id}:
    delete:
      description: Unregister seller from a seller
      parameters:
      - description: ID from seller to unregister
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Unregister a seller
      tags:
      - Sellers
    put:
      consumes:
      - application/json
      description: Update seller from a seller
      parameters:
      - description: Register
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.UpdateSellerRequest'
      - description: ID from seller to update
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Update a seller
      tags:
      - Sellers
swagger: "2.0"
