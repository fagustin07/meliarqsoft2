// Code generated by MockGen. DO NOT EDIT.
// Source: purchase.go

// Package mock is a generated GoMock package.
package mock

import (
	model "meliarqsoft2/internal/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIPurchaseRepository is a mock of IPurchaseRepository interface.
type MockIPurchaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPurchaseRepositoryMockRecorder
}

// MockIPurchaseRepositoryMockRecorder is the mock recorder for MockIPurchaseRepository.
type MockIPurchaseRepositoryMockRecorder struct {
	mock *MockIPurchaseRepository
}

// NewMockIPurchaseRepository creates a new mock instance.
func NewMockIPurchaseRepository(ctrl *gomock.Controller) *MockIPurchaseRepository {
	mock := &MockIPurchaseRepository{ctrl: ctrl}
	mock.recorder = &MockIPurchaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPurchaseRepository) EXPECT() *MockIPurchaseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPurchaseRepository) Create(purchase *model.Purchase, product *model.Product) (uuid.UUID, float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", purchase, product)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(float32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockIPurchaseRepositoryMockRecorder) Create(purchase, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPurchaseRepository)(nil).Create), purchase, product)
}

// Delete mocks base method.
func (m *MockIPurchaseRepository) Delete(ID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIPurchaseRepositoryMockRecorder) Delete(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIPurchaseRepository)(nil).Delete), ID)
}

// Find mocks base method.
func (m *MockIPurchaseRepository) Find(productID uuid.UUID) ([]*model.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", productID)
	ret0, _ := ret[0].([]*model.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIPurchaseRepositoryMockRecorder) Find(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIPurchaseRepository)(nil).Find), productID)
}
