definitions:
  dto.CreateProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      id_seller:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - category
    - description
    - id_seller
    - name
    - price
    - stock
    type: object
  dto.CreatePurchaseRequest:
    properties:
      id_product:
        type: string
      id_user:
        type: string
      units:
        type: integer
    required:
    - id_product
    - id_user
    - units
    type: object
  dto.CreateSellerRequest:
    properties:
      business_name:
        type: string
      email:
        type: string
    required:
    - business_name
    - email
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      surname:
        type: string
    required:
    - email
    - name
    - surname
    type: object
  dto.ProductDTO:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        example: ""
        type: string
      id_seller:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    type: object
  dto.ProductID:
    properties:
      product_id:
        type: string
    type: object
  dto.PurchaseDTO:
    properties:
      date:
        type: string
      id_product:
        type: string
      id_user:
        type: string
      total:
        type: number
      units:
        type: integer
    type: object
  dto.SellerDTO:
    properties:
      businessName:
        type: string
      email:
        type: string
      seller_id:
        type: string
    type: object
  dto.SellerID:
    properties:
      seller_id:
        type: string
    type: object
  dto.UpdateProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - stock
    type: object
  dto.UpdateSellerRequest:
    properties:
      business_name:
        type: string
      email:
        type: string
    required:
    - business_name
    - email
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      surname:
        type: string
    required:
    - email
    - name
    - surname
    type: object
  dto.UserDTO:
    properties:
      email:
        type: string
      name:
        type: string
      surname:
        type: string
      user_id:
        type: string
    type: object
  dto.UserID:
    properties:
      user_id:
        type: string
    type: object
info:
  contact: {}
paths:
  /products:
    get:
      consumes:
      - application/json
      description: Find products that contains given name string and category string
      parameters:
      - description: find name
        in: query
        name: name
        type: string
      - description: find category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ProductDTO'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Find products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create product from a seller
      parameters:
      - description: Register
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductID'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create a product
      tags:
      - Products
  /products/{id}:
    delete:
      description: Delete product from a seller
      parameters:
      - description: ID from product to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Delete a product
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update product from a seller
      parameters:
      - description: Register
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductRequest'
      - description: ID from product to update
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Update a product
      tags:
      - Products
  /products/{id}/purchases:
    get:
      description: Find purchases from product
      parameters:
      - description: ID from product
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Find purchases from product.
      tags:
      - Purchases
  /products/prices:
    get:
      consumes:
      - application/json
      description: Filter products that contains given name string and category string
      parameters:
      - description: starting price
        in: query
        name: min_price
        required: true
        type: string
      - description: limit price
        in: query
        name: max_price
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ProductDTO'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Filter products
      tags:
      - Products
  /products/purchases:
    post:
      consumes:
      - application/json
      description: Make User buy Product by ids.
      parameters:
      - description: Register
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePurchaseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/dto.PurchaseDTO'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Make a purchase.
      tags:
      - Purchases
  /sellers:
    get:
      consumes:
      - application/json
      description: Find sellers that contains given business name
      parameters:
      - description: find name
        in: query
        name: business_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.SellerDTO'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Find sellers
      tags:
      - Sellers
    post:
      consumes:
      - application/json
      description: Create seller
      parameters:
      - description: Register
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSellerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SellerID'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create a seller
      tags:
      - Sellers
  /sellers/{id}:
    delete:
      description: Delete seller from a seller
      parameters:
      - description: ID from seller to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Delete a seller
      tags:
      - Sellers
    put:
      consumes:
      - application/json
      description: Update seller from a seller
      parameters:
      - description: Register
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateSellerRequest'
      - description: ID from seller to update
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Update a seller
      tags:
      - Sellers
  /users:
    get:
      consumes:
      - application/json
      description: Find user with given id
      parameters:
      - description: find name
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserDTO'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Find user
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: Register
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserID'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create a user
      tags:
      - Users
  /users/{id}:
    delete:
      description: Delete user from a user
      parameters:
      - description: ID from user to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Delete a user
      tags:
      - Users
    put:
      description: Update user from a user
      parameters:
      - description: Register
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      - description: ID from user to update
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Update a user
      tags:
      - Users
swagger: "2.0"
