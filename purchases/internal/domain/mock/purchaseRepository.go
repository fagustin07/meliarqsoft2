// Code generated by MockGen. DO NOT EDIT.
// Source: purchase.go

// Package mock is a generated GoMock package.
package mock

import (
	model "meliarqsoft2/internal/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIPurchaseRepository is a mock of IPurchaseRepository interface.
type MockIPurchaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPurchaseRepositoryMockRecorder
}

// MockIPurchaseRepositoryMockRecorder is the mock recorder for MockIPurchaseRepository.
type MockIPurchaseRepositoryMockRecorder struct {
	mock *MockIPurchaseRepository
}

// NewMockIPurchaseRepository creates a new mock instance.
func NewMockIPurchaseRepository(ctrl *gomock.Controller) *MockIPurchaseRepository {
	mock := &MockIPurchaseRepository{ctrl: ctrl}
	mock.recorder = &MockIPurchaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPurchaseRepository) EXPECT() *MockIPurchaseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPurchaseRepository) Create(purchase *model.Purchase) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", purchase)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIPurchaseRepositoryMockRecorder) Create(purchase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPurchaseRepository)(nil).Create), purchase)
}

// DeleteAll mocks base method.
func (m *MockIPurchaseRepository) DeleteAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockIPurchaseRepositoryMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockIPurchaseRepository)(nil).DeleteAll))
}

// DeleteByProductsIDs mocks base method.
func (m *MockIPurchaseRepository) DeleteByProductsIDs(productsIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByProductsIDs", productsIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByProductsIDs indicates an expected call of DeleteByProductsIDs.
func (mr *MockIPurchaseRepositoryMockRecorder) DeleteByProductsIDs(productsIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByProductsIDs", reflect.TypeOf((*MockIPurchaseRepository)(nil).DeleteByProductsIDs), productsIDs)
}

// Find mocks base method.
func (m *MockIPurchaseRepository) Find(productID uuid.UUID) ([]*model.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", productID)
	ret0, _ := ret[0].([]*model.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIPurchaseRepositoryMockRecorder) Find(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIPurchaseRepository)(nil).Find), productID)
}
