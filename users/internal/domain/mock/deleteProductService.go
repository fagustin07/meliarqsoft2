// Code generated by MockGen. DO NOT EDIT.
// Source: customer.go

// Package mock is a generated GoMock package.
package mock

import (
	"github.com/golang/mock/gomock"
	"github.com/google/uuid"
	"reflect"
)

// MockIDeleteProductsBySellerService is a mock of IDeleteProductsBySellerService interface.
type MockIDeleteProductsBySellerService struct {
	ctrl     *gomock.Controller
	recorder *MockIDeleteProductsBySellerServiceMockRecorder
}

// MockIDeleteProductsBySellerServiceMockRecorder is the mock recorder for MockIDeleteProductsBySellerService.
type MockIDeleteProductsBySellerServiceMockRecorder struct {
	mock *MockIDeleteProductsBySellerService
}

// NewMockIDeleteProductsBySellerService creates a new mock instance.
func NewMockIDeleteProductsBySellerService(ctrl *gomock.Controller) *MockIDeleteProductsBySellerService {
	mock := &MockIDeleteProductsBySellerService{ctrl: ctrl}
	mock.recorder = &MockIDeleteProductsBySellerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDeleteProductsBySellerService) EXPECT() *MockIDeleteProductsBySellerServiceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIDeleteProductsBySellerService) Execute(IDSeller uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", IDSeller)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockIDeleteProductsBySellerServiceMockRecorder) Execute(IDSeller interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIDeleteProductsBySellerService)(nil).Execute), IDSeller)
}
