// Code generated by MockGen. DO NOT EDIT.
// Source: product.go

// Package mock is a generated GoMock package.
package mock

import (
	model "meliarqsoft2/internal/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIProductRepository is a mock of IProductRepository interface.
type MockIProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIProductRepositoryMockRecorder
}

// MockIProductRepositoryMockRecorder is the mock recorder for MockIProductRepository.
type MockIProductRepositoryMockRecorder struct {
	mock *MockIProductRepository
}

// NewMockIProductRepository creates a new mock instance.
func NewMockIProductRepository(ctrl *gomock.Controller) *MockIProductRepository {
	mock := &MockIProductRepository{ctrl: ctrl}
	mock.recorder = &MockIProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductRepository) EXPECT() *MockIProductRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIProductRepository) Create(product model.Product) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", product)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIProductRepositoryMockRecorder) Create(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIProductRepository)(nil).Create), product)
}

// Delete mocks base method.
func (m *MockIProductRepository) Delete(ID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIProductRepositoryMockRecorder) Delete(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIProductRepository)(nil).Delete), ID)
}

// DeleteAll mocks base method.
func (m *MockIProductRepository) DeleteAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockIProductRepositoryMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockIProductRepository)(nil).DeleteAll))
}

// DeleteBySeller mocks base method.
func (m *MockIProductRepository) DeleteBySeller(sellerID uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBySeller", sellerID)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBySeller indicates an expected call of DeleteBySeller.
func (mr *MockIProductRepositoryMockRecorder) DeleteBySeller(sellerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBySeller", reflect.TypeOf((*MockIProductRepository)(nil).DeleteBySeller), sellerID)
}

// Filter mocks base method.
func (m *MockIProductRepository) Filter(minPrice, maxPrice float32) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", minPrice, maxPrice)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockIProductRepositoryMockRecorder) Filter(minPrice, maxPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockIProductRepository)(nil).Filter), minPrice, maxPrice)
}

// Find mocks base method.
func (m *MockIProductRepository) Find(name, category string) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", name, category)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIProductRepositoryMockRecorder) Find(name, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIProductRepository)(nil).Find), name, category)
}

// FindById mocks base method.
func (m *MockIProductRepository) FindById(ID uuid.UUID) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ID)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockIProductRepositoryMockRecorder) FindById(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockIProductRepository)(nil).FindById), ID)
}

// FindIdsBySellerId mocks base method.
func (m *MockIProductRepository) FindIdsBySellerId(sellerId uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIdsBySellerId", sellerId)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIdsBySellerId indicates an expected call of FindIdsBySellerId.
func (mr *MockIProductRepositoryMockRecorder) FindIdsBySellerId(sellerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIdsBySellerId", reflect.TypeOf((*MockIProductRepository)(nil).FindIdsBySellerId), sellerId)
}

// GetFrom mocks base method.
func (m *MockIProductRepository) GetFrom(sellerId uuid.UUID) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrom", sellerId)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFrom indicates an expected call of GetFrom.
func (mr *MockIProductRepositoryMockRecorder) GetFrom(sellerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrom", reflect.TypeOf((*MockIProductRepository)(nil).GetFrom), sellerId)
}

// Restore mocks base method.
func (m *MockIProductRepository) Restore(IDs []uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", IDs)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore.
func (mr *MockIProductRepositoryMockRecorder) Restore(IDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockIProductRepository)(nil).Restore), IDs)
}

// Update mocks base method.
func (m *MockIProductRepository) Update(ID uuid.UUID, name, description, category string, price float32, stock int) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ID, name, description, category, price, stock)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIProductRepositoryMockRecorder) Update(ID, name, description, category, price, stock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIProductRepository)(nil).Update), ID, name, description, category, price, stock)
}

// UpdateStock mocks base method.
func (m *MockIProductRepository) UpdateStock(ID uuid.UUID, stock int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStock", ID, stock)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStock indicates an expected call of UpdateStock.
func (mr *MockIProductRepositoryMockRecorder) UpdateStock(ID, stock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStock", reflect.TypeOf((*MockIProductRepository)(nil).UpdateStock), ID, stock)
}
